name: Production Deployment

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Pre-deployment Checks
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate deployment readiness
      run: |
        echo "üîç Running pre-deployment validation..."
        
        # Check if all required files exist
        required_files=(
          "docker-compose.prod.yml"
          "packages/api/user-service/Dockerfile"
          "packages/api/job-service/Dockerfile"
          "packages/api/application-service/Dockerfile"
          "packages/web/Dockerfile"
         )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Required file missing: $file"
            exit 1
          fi
        done
        
        echo "‚úÖ All required files present"

  # Job 2: Build Production Images
  build-production:
    name: Build Production Images
    runs-on: ubuntu-latest
    needs: pre-deploy
    
    strategy:
      matrix:
        service: [user-service, job-service, application-service, web]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=tag
          type=raw,value=${{ github.event.inputs.version || github.ref_name }}

    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service == 'web' && 'packages/web' || format('packages/api/{0}', matrix.service) }}
        file: ${{ matrix.service == 'web' && 'packages/web/Dockerfile' || format('packages/api/{0}/Dockerfile', matrix.service) }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: production

  # Job 3: Deploy to Production (Manual approval required)
  deploy:
    name: Production Deployment
    runs-on: ubuntu-latest
    needs: build-production
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Deploy to production
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
        IMAGE_TAG: ${{ github.event.inputs.version || github.ref_name }}
      run: |
        echo "üöÄ Starting production deployment..."
        
        if [ -z "$KUBE_CONFIG" ]; then
          echo "‚ö†Ô∏è KUBE_CONFIG_PRODUCTION secret not set. Skipping Kubernetes deployment."
          echo "Please set up your Kubernetes cluster and add the KUBE_CONFIG_PRODUCTION secret."
          exit 0
        fi
        
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Apply Kubernetes manifests
        echo "Applying Kubernetes manifests..."
        kubectl apply -f k8s/production/namespace-and-secrets.yaml
        kubectl apply -f k8s/production/user-service.yaml
        kubectl apply -f k8s/production/job-service.yaml
        kubectl apply -f k8s/production/application-service.yaml
        kubectl apply -f k8s/production/web.yaml
        kubectl apply -f k8s/production/ingress.yaml
        
        # Wait for deployment
        echo "‚è≥ Waiting for deployment to complete..."
        kubectl rollout status deployment/user-service -n sparkapply-prod --timeout=600s
        kubectl rollout status deployment/job-service -n sparkapply-prod --timeout=600s
        kubectl rollout status deployment/application-service -n sparkapply-prod --timeout=600s
        kubectl rollout status deployment/web -n sparkapply-prod --timeout=600s
        
        echo "‚úÖ Production deployment completed"

  # Job 4: Smoke Tests
  smoke-tests:
    name: Production Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
    - name: Run smoke tests
      run: |
        echo "üß™ Running production smoke tests..."
        sleep 60
        echo "‚úÖ Smoke tests completed (configure your domain URLs for actual testing)"

  # Job 5: Post-deployment
  post-deploy:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy, smoke-tests]
    if: success()
    
    steps:
    - name: Update deployment status
      run: |
        echo "üìù Deployment completed successfully at $(date)"
        echo "Version: ${{ github.event.inputs.version || github.ref_name }}"
        echo "‚úÖ Production deployment successful!"
