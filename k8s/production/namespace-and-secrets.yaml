apiVersion: v1
kind: Namespace
metadata:
  name: sparkapply-prod
  labels:
    name: sparkapply-prod
    environment: production
---
# Secrets (values should be base64 encoded in production)
apiVersion: v1
kind: Secret
metadata:
  name: sparkapply-secrets
  namespace: sparkapply-prod
type: Opaque
data:
    # IMPORTANT: Replace these with actual base64 encoded secrets in production.
    # Use `echo -n "your_value" | base64` to encode.
    # Example: `database-url: <base64_encoded_database_url>`
  database-url: <base64_encoded_database_url> # Example: postgresql://sparkapply:password123@postgres:5432/sparkapply_prod
  redis-url: <base64_encoded_redis_url> # Example: redis://redis:6379
  jwt-secret: <base64_encoded_jwt_secret> # IMPORTANT: Generate a strong, unique secret for production
  jwt-refresh-secret: <base64_encoded_jwt_refresh_secret> # IMPORTANT: Generate a strong, unique secret for production
---
# Persistent Volume Claim for file uploads
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sparkapply-uploads
  namespace: sparkapply-prod
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard # Use 'standard' for most cloud providers, or a specific one if available (e.g., 'gp2' for AWS, 'ssd' for GCP)
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: sparkapply-config
  namespace: sparkapply-prod
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  CORS_ORIGIN: "https://api.sparkapply.com,https://sparkapply.com" # Allow both API and web origins
  RATE_LIMIT_WINDOW_MS: "60000" # 1 minute window for rate limiting
  RATE_LIMIT_MAX_REQUESTS: "60" # Max 60 requests per minute
  MAX_FILE_SIZE: "10485760"
  ENABLE_ANALYTICS: "true"
  ENABLE_NOTIFICATIONS: "true"
  SCRAPING_INTERVAL_HOURS: "6"
  MAX_JOBS_PER_SCRAPE: "100"
  JOB_RETENTION_DAYS: "30"
---
# Service Account for the application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sparkapply-service-account
  namespace: sparkapply-prod
---
  # Role for the service account (example - adjust permissions as needed for least privilege)

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: sparkapply-prod
  name: sparkapply-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
  # Role binding to grant the service account the defined role

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sparkapply-role-binding
  namespace: sparkapply-prod
subjects:
- kind: ServiceAccount
  name: sparkapply-service-account
  namespace: sparkapply-prod
roleRef:
  kind: Role
  name: sparkapply-role
  apiGroup: rbac.authorization.k8s.io
