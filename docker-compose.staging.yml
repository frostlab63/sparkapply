version: '3.8'

services:
  # PostgreSQL Database for Staging
  postgres:
    image: postgres:15-alpine
    container_name: sparkapply-postgres-staging
    environment:
      POSTGRES_DB: sparkapply_staging
      POSTGRES_USER: sparkapply_staging
      POSTGRES_PASSWORD: staging_secure_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sparkapply_staging -d sparkapply_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sparkapply-staging-network
    restart: unless-stopped

  # Redis for Staging
  redis:
    image: redis:7-alpine
    container_name: sparkapply-redis-staging
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    volumes:
      - redis_staging_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sparkapply-staging-network
    restart: unless-stopped

  # Backend API Service for Staging
  backend:
    build:
      context: ./packages/api/user-service
      dockerfile: Dockerfile.staging
    container_name: sparkapply-backend-staging
    environment:
      NODE_ENV: staging
      DATABASE_URL: postgresql://sparkapply_staging:staging_secure_password@postgres:5432/sparkapply_staging
      REDIS_URL: redis://redis:6379
      JWT_SECRET: staging-jwt-secret-key-different-from-prod
      JWT_REFRESH_SECRET: staging-jwt-refresh-secret-key
      PORT: 3001
      CORS_ORIGIN: http://localhost:5174
    ports:
      - "3002:3001"  # Different port for staging
    volumes:
      - ./packages/api/user-service/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sparkapply-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend for Staging
  frontend:
    build:
      context: ./packages/web
      dockerfile: Dockerfile.staging
    container_name: sparkapply-frontend-staging
    environment:
      VITE_API_URL: http://localhost:3002/api/v1
      VITE_APP_ENV: staging
      VITE_ENABLE_ANALYTICS: "true"
    ports:
      - "5174:80"  # Different port for staging
    depends_on:
      - backend
    networks:
      - sparkapply-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer for Staging
  nginx:
    image: nginx:alpine
    container_name: sparkapply-nginx-staging
    ports:
      - "8080:80"  # Staging nginx port
    volumes:
      - ./nginx/staging.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - sparkapply-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: sparkapply-prometheus-staging
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_staging_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sparkapply-staging-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Monitoring (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: sparkapply-grafana-staging
    ports:
      - "3000:3000"
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=staging_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - sparkapply-staging-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_staging_data:
    driver: local
  redis_staging_data:
    driver: local
  prometheus_staging_data:
    driver: local
  grafana_staging_data:
    driver: local

networks:
  sparkapply-staging-network:
    driver: bridge
